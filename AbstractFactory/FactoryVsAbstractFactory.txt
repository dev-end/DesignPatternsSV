/*
===============================================================================
           FACTORY METHOD vs ABSTRACT FACTORY PATTERN - DETAILED COMPARISON
===============================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                          FACTORY METHOD PATTERN                            │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│ PURPOSE: Creates SINGLE objects using inheritance                           │
│ SCOPE:   One product type at a time                                        │
│                                                                             │
│    ┌─────────────────────────┐                                             │
│    │     <<abstract>>        │                                             │
│    │      Creator            │                                             │
│    ├─────────────────────────┤                                             │
│    │ + FactoryMethod(): Product {abstract}                                 │
│    │ + SomeOperation()       │                                             │
│    └─────────────────────────┘                                             │
│              △                                                             │
│              │                                                             │
│    ┌─────────┴─────────┐           ┌─────────────────────┐                 │
│    │  ConcreteCreatorA │           │  ConcreteCreatorB   │                 │
│    ├───────────────────┤           ├─────────────────────┤                 │
│    │ + FactoryMethod() │           │ + FactoryMethod()   │                 │
│    │   returns ProductA│           │   returns ProductB  │                 │
│    └───────────────────┘           └─────────────────────┘                 │
│              │                               │                             │
│              ▼ creates                       ▼ creates                     │
│    ┌───────────────────┐           ┌─────────────────────┐                 │
│    │     ProductA      │           │     ProductB        │                 │
│    └───────────────────┘           └─────────────────────┘                 │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                         ABSTRACT FACTORY PATTERN                           │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│ PURPOSE: Creates FAMILIES of related objects using composition              │
│ SCOPE:   Multiple related product types                                    │
│                                                                             │
│           ┌─────────────────────────┐                                      │
│           │     <<abstract>>        │                                      │
│           │   AbstractFactory       │                                      │
│           ├─────────────────────────┤                                      │
│           │ + CreateProductA()      │                                      │
│           │ + CreateProductB()      │                                      │
│           └─────────────────────────┘                                      │
│                     △                                                      │
│                     │                                                      │
│       ┌─────────────┴──────────────┐                                       │
│       │                            │                                       │
│ ┌─────┴──────────┐        ┌────────┴─────────┐                            │
│ │ ConcreteFactory1│        │ ConcreteFactory2 │                            │
│ ├────────────────┤        ├──────────────────┤                            │
│ │ + CreateProductA│        │ + CreateProductA │                            │
│ │ + CreateProductB│        │ + CreateProductB │                            │
│ └────────────────┘        └──────────────────┘                            │
│       │        │                   │        │                             │
│       ▼        ▼                   ▼        ▼                             │
│ ┌─────────┐ ┌────────┐       ┌─────────┐ ┌────────┐                       │
│ │ProductA1│ │ProductB1│       │ProductA2│ │ProductB2│                       │
│ │(Family1)│ │(Family1)│       │(Family2)│ │(Family2)│                       │
│ └─────────┘ └────────┘       └─────────┘ └────────┘                       │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

===============================================================================
                               KEY DIFFERENCES
===============================================================================

┌─────────────────────┬─────────────────────┬─────────────────────────────────┐
│    ASPECT           │   FACTORY METHOD    │        ABSTRACT FACTORY         │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ PRIMARY PURPOSE     │ Create ONE object   │ Create FAMILY of objects        │
│                     │ at a time           │ that work together              │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ STRUCTURE           │ Uses inheritance    │ Uses composition                │
│                     │ (subclassing)       │ (object delegation)             │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ COMPLEXITY          │ Simpler             │ More complex                    │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ FACTORY METHODS     │ One method          │ Multiple methods                │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ PRODUCT RELATIONSHIP│ Independent         │ Related/Compatible              │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ EXTENSIBILITY       │ Add new products    │ Add new product families        │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ CLIENT KNOWLEDGE    │ Knows concrete      │ Doesn't know concrete           │
│                     │ creator classes     │ product classes                 │
├─────────────────────┼─────────────────────┼─────────────────────────────────┤
│ WHEN TO USE         │ Single product      │ Multiple related products       │
│                     │ creation            │ need to work together           │
└─────────────────────┴─────────────────────┴─────────────────────────────────┘

===============================================================================
                           REAL-WORLD EXAMPLES
===============================================================================

🏭 FACTORY METHOD EXAMPLES:
┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│ 1. DOCUMENT CREATOR                                                         │
│    • WordDocumentCreator  → creates WordDocument                           │
│    • PDFDocumentCreator   → creates PDFDocument                            │
│    • ExcelDocumentCreator → creates ExcelDocument                          │
│                                                                             │
│ 2. LOGGER FACTORY                                                           │
│    • FileLoggerCreator    → creates FileLogger                             │
│    • DatabaseLoggerCreator → creates DatabaseLogger                        │
│    • ConsoleLoggerCreator → creates ConsoleLogger                          │
│                                                                             │
│ 3. PAYMENT PROCESSOR                                                        │
│    • PayPalCreator       → creates PayPalProcessor                         │
│    • StripeCreator       → creates StripeProcessor                         │
│    • CreditCardCreator   → creates CreditCardProcessor                     │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

🏗️ ABSTRACT FACTORY EXAMPLES:
┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│ 1. GUI TOOLKIT (Our Example)                                               │
│    • WindowsFactory → WindowsButton + WindowsCheckbox + WindowsMenu        │
│    • MacFactory    → MacButton + MacCheckbox + MacMenu                     │
│    • LinuxFactory  → LinuxButton + LinuxCheckbox + LinuxMenu               │
│                                                                             │
│ 2. COMPUTER MANUFACTURING (Our Implementation)                              │
│    • DellFactory   → DellDesktop + DellLaptop + DellMonitor                │
│    • AppleFactory  → iMac + MacBook + StudioDisplay                        │
│    • HPFactory     → HPDesktop + HPLaptop + HPMonitor                      │
│                                                                             │
│ 3. DATABASE CONNECTION                                                      │
│    • MySQLFactory  → MySQLConnection + MySQLCommand + MySQLDataReader      │
│    • SQLiteFactory → SQLiteConnection + SQLiteCommand + SQLiteDataReader   │
│    • OracleFactory → OracleConnection + OracleCommand + OracleDataReader   │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

===============================================================================
                              CODE COMPARISON
===============================================================================

🔧 FACTORY METHOD CODE STRUCTURE:
┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│ public abstract class DocumentCreator                                      │
│ {                                                                           │
│     public abstract IDocument CreateDocument();  // ← ONE factory method   │
│                                                                             │
│     public void ProcessDocument()                                          │
│     {                                                                       │
│         var doc = CreateDocument();               // ← Uses the factory     │
│         doc.Open();                                                         │
│         doc.Save();                                                         │
│     }                                                                       │
│ }                                                                           │
│                                                                             │
│ public class WordCreator : DocumentCreator                                 │
│ {                                                                           │
│     public override IDocument CreateDocument()                             │
│     {                                                                       │
│         return new WordDocument();                // ← Creates ONE product  │
│     }                                                                       │
│ }                                                                           │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

🏗️ ABSTRACT FACTORY CODE STRUCTURE:
┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│ public abstract class GUIFactory                                           │
│ {                                                                           │
│     public abstract IButton CreateButton();       // ← MULTIPLE methods    │
│     public abstract ICheckbox CreateCheckbox();   // ← for different       │
│     public abstract IMenu CreateMenu();           // ← product types       │
│ }                                                                           │
│                                                                             │
│ public class WindowsFactory : GUIFactory                                   │
│ {                                                                           │
│     public override IButton CreateButton()                                 │
│     {                                                                       │
│         return new WindowsButton();               // ← Creates FAMILY      │
│     }                                                                       │
│                                                                             │
│     public override ICheckbox CreateCheckbox()                             │
│     {                                                                       │
│         return new WindowsCheckbox();             // ← of related          │
│     }                                                                       │
│                                                                             │
│     public override IMenu CreateMenu()                                     │
│     {                                                                       │
│         return new WindowsMenu();                 // ← products            │
│     }                                                                       │
│ }                                                                           │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

===============================================================================
                            DECISION GUIDELINES
===============================================================================

🤔 CHOOSE FACTORY METHOD WHEN:
┌─────────────────────────────────────────────────────────────────────────────┐
│ ✅ You need to create a SINGLE type of object                              │
│ ✅ You want to delegate object creation to subclasses                      │
│ ✅ You have a class hierarchy for creators                                 │
│ ✅ The creation logic is simple                                            │
│ ✅ Products are independent of each other                                  │
│ ✅ You want to use inheritance-based design                                │
│                                                                             │
│ Example: Creating different types of vehicles (Car, Truck, Motorcycle)     │
└─────────────────────────────────────────────────────────────────────────────┘

🏗️ CHOOSE ABSTRACT FACTORY WHEN:
┌─────────────────────────────────────────────────────────────────────────────┐
│ ✅ You need to create FAMILIES of related objects                          │
│ ✅ Products must work together (compatibility)                             │
│ ✅ You want to hide concrete product classes from client                   │
│ ✅ You need to enforce constraints between products                        │
│ ✅ You want to switch entire product families                              │
│ ✅ You want to use composition-based design                                │
│                                                                             │
│ Example: Cross-platform UI (Windows UI family vs Mac UI family)           │
└─────────────────────────────────────────────────────────────────────────────┘

===============================================================================
                              MIGRATION PATH
===============================================================================

📈 EVOLUTION: Factory Method → Abstract Factory
┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│ 1. START with Factory Method when you need simple object creation          │
│                                                                             │
│ 2. EVOLVE to Abstract Factory when:                                        │
│    • You discover related products need to work together                   │
│    • You need to create multiple types in one family                       │
│    • You want to ensure product compatibility                              │
│    • You need to switch entire product families                            │
│                                                                             │
│ 3. EXAMPLE EVOLUTION:                                                       │
│    Factory Method: CreateButton() → WindowsButton                          │
│                   ↓                                                         │
│    Abstract Factory: CreateButton() + CreateMenu() + CreateDialog()        │
│                     → Complete Windows UI Family                           │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

===============================================================================
                                SUMMARY
===============================================================================

🎯 FACTORY METHOD:  "Create ONE thing, but let subclasses decide WHICH one"
🏗️ ABSTRACT FACTORY: "Create a FAMILY of things that work together"

Both patterns solve the problem of object creation, but at different scales:
• Factory Method: Individual object creation
• Abstract Factory: Related object family creation
*/
